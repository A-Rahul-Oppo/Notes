L9. Bipartite Graph (BFS):

Bipartite Graph:A graph that can be coloured using exactly 2 colours such that no 2 adjacent nodes have the same colour

If the graph has an odd length cycle, then it is not bipartite
If the graph doesn't have any odd length cycle, it is bipartite


bool bipartiteBfs(int src, vector<int> adj[], vector<int> &color){
	queue<int> q;
	q.push(src);
	color[src]= 1;
	
	while(!q.empty()){
		int node= q.front();
		q.pop();
		
		for(auto it: adj[node]){
			if(color[it]==-1){
				color[it]= 1-color[node];
				q.push(it);
			}
			else if(color[it]==color[node]){
				return false;
			}
		}
	}
	return true;
}

bool checkBipartite(vector<int> adj[], int n){
	vector<int> color(n, -1);
	
	for(int i=0;i<n;i++)
		if(colour[i]==-1)
			if(!bipartiteBfs(i, adj, color))
				return false;
	
	return true;
}

int main(){
	int n, m;
	cin>>n>>m;
	vector<int> adj[n];
	for(int i=0;i<m;i++){
		int u, v;
		cin>>u>>>v;
		adj[u].push_back(v);
		adj[v].push_back(u);
	}
	
	if(checkBipartite(adj, n))
		cout<<"YES"<<endl;
	else
		cout<<"NO"<<endl;
	
	return 0;
}

// TC= O(n+E), SC= O(n+E)+O(n)+O(n)






L10. Bipartite Graph (DFS):

bool bipartiteDfs(itn node, vector<int> adj[], vector<int> &color){
	if(color[node]==-1)
		color[node]= 1;
	
	for(auto it: adj[node]){
		if(color[it]==-1){
			color[it]= 1-color[node];
			if(!bipartiteDfs(it, adj, color)){
				return false;
			}
		}
		else if(color[it]==color[node]){
			return false;
		}
	}
	
	return true;
}

bool checkBipartite(vector<int> adj[], int n){
	vector<int> color(n, -1);
	
	for(int i=0;i<n;i++){
		if(color[i]==-1)
			if(!bipartiteDfs(i, adj, color))
				return false;
	}
	
	return true;
}

int main(){
	int n, m;
	cin>>n>>m;
	vector<int> adj[n];
	for(int i=0;i<m;i++){
		int u, v;
		cin>>u>>v;
		adj[u].push_back(v);
		adj[v].push_back(u);
	}
	
	if(checkBipartite(adj, n))
		cout<<"YES"<<endl;
	else
		cout<<"NO"<<endl;
	
	return 0;
}

// TC= O(n+E), SC= O(n+E)+O(n)+O(n)






L11. Cycle Detection in Directed Graph using DFS:

bool checkCycle(int node, vector<int> adj[], vector<int> &vis, vector<int> &dfsVis){
	vis[node]= 1;
	dfsVis[node]= 1;
	
	for(auto it: adj[node]){
		if(!vis[it]){
			if(checkCycle(it, adj, vis, dfsVis))
				return true;
		}
		else if(dfsVis[it]){
			return true;
		}
	}
	
	dfsVis[node]= 0;
	return false;
}

bool isCyclic(int N, vector<int> adj[]){
	vector<int> vis(N, 0);
	vector<int> dfsVis(N, 0);
	
	for(int i=0;i<N;i++){
		if(!vis[i]){
			if(checkCycle(i, adj, vis, dfsVis)){
				return true;
			}
		}
	}
	
	return false;
}

// TC= O(n+E), SC= O(n)+O(n)+Auxillary Space O(n)






L12. Topological Sort (DFS):

Topological Sort: Linear ordering of vertices such that if there is an edge u-->v, u appears before v in that ordering

Topo sort is for DAG (Directed Acylic Graphs)

Multiple topological sortings can exist for a single graph


void findTopoSortDfs(int node, vector<int> &vis, stack<int> &st, vector<int> adj[]){
	vis[node]= 1;
	
	for(auto it: adj[node]){
		if(!vis[it]){
			findTopoSortDfs(it, vis, st, adj);
		}
	}
	
	st.push(node);
}

vector<int> topoSort(int N, vector<int> adj[]){
	stack<int> st;
	vector<int> vis(N, 0);
	for(int i=0;i<N;i++){
		if(vis[i]==0)
			findTopoSortDfs(i, vis, st, adj);
	}
	
	vector<int> topo;
	while(!st.empty()){
		topo.push_back(st.top());
		st.pop();
	}
	
	return topo;
}

// TC= O(n+E), SC= O(n)+Auxillary Space O(n)+Stack O(n)






L13. Topological Sort (BFS) (Kahn's Algorithm):

vector<int> topoSort(int N, vector<int> adj[]){
	queue<int> q;
	vector<int> indegree(N, 0);
	
	for(int i=0;i<n;i++)
		for(auto it: adj[i])
			indegree[it]++;
	
	for(int i=0;i<N;i++)
		if(indegree[i]==0)
			q.push(i);
	
	vector<int> topo;
	while(!q.empty()){
		int node= q.front();
		q.pop();
		topo.push_back(node);
		for(auto it: adj[node]){
			indegree[it]--;
			if(indegree[it]==0){
				q.push(it);
			}
		}
	}
	
	return topo;
}

// TC= O(n+E), SC= O(n)+O(n)