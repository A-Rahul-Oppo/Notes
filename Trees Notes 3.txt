L26. Print Root to Node Path in Binary Tree:

bool getPath(TreeNode* root, vector<int> &arr, int x){
	if(!root) return false;
	
	arr.push_back(root->val);
	
	if(root->val==x) return true;
	
	if(getPath(root->left, arr, x) || getPath(root->right, arr, x))
		return true;

	arr.pop_back();
	return false;
}

vector<int> path(TreeNode* root, int x){
	vector<int> arr;
	if(root==NULL) return arr;
	
	getPath(root, arr, x);
	return arr;
}






L27. Lowest Common Ancestor in Binary Tree:

TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q){
	// base case
	if(root==NULL || root==p || root==q)
		return root;
	
	TreeNode* left= lowestCommonAncestor(root->left, p, q);
	TreeNode* right= lowestCommonAncestor(root->right, p, q);
	
	// result
	if(left==NULL) return right;
	else if(right==NULL) return left;
	
	// both left and right are not null, we found our result
	else return root;
}






L28. Maximum Width of Binary Tree:

Width: Number of nodes in a level, between any 2 nodes

For 0-based indexing, for ith node, left child= 2*i+1, right child= 2*i+2
For 1-based indexing, for ith node, left child= 2*i, right child= 2*i+1

int widthOfBinaryTree(TreeNode* root){
	if(!root) return 0;
	int ans= 0;
	queue<pair<TreeNode*, int>> q;
	q.push({root, 0});
	while(!q.empty()){
		int size= q.size();
		int mmin= q.front().second;
		int first, last;
		for(int i=0;i<size;i++){
			int cur_id= q.front().second-mmin;
			TreeNode* node= q.front().first;
			q.pop();
			if(i==0) first= cur_id;
			if(i==size-1) last= cur_id;
			
			if(node->left) q.push({node->left, cur_id*2+1});
			if(node->right) q.push({node->right, cur_id*2+2});
		}	
		ans= max(ans, last-first+1);
	}
	return ans;
}
// TC= O(n), SC= O(n)






L29. Children Sum Property in Binary Tree:

Children Sum Property: Any nodes value= left child value+right child value

Self Notes:
If both children sum is less than parent, make children's value to parent's value
If both children values sum is greater than or equal to parent, make parent's value to children's sum
Recursively go left and right. Traversal type: DFS
When coming back up the tree, take children sum and replace it in parent
At any point we reach null, just return (base case)
Intuition: while going down, increase the children values so we make sure to never fall short, then all we have to do is sum both children and replace it in parent

void changeTree(BinaryTreeNode<int>* root){
	if(root==NULL) return;
	int child= 0;
	
	if(child->left)
		child+= root->left->data;
	if(root->right)
		child+= root->right->data;
	
	if(child>=root->data)
		root->data= child;
	else{
		if(root->left) root->left->data= root->data;
		if(root->right) root->right->data= root->data;
	}
	
	reorder(root->left);
	reorder(root->right);
	
	int tot= 0;
	if(root->left) tot+= root->left->data;
	if(root->right) tot+= root->right->data;
	if(root->left || root->right) root->data= tot;
}
// TC= O(n), SC= O(h)~O(n)






L30. Print all the Nodes at a distance of K from any given node in Binary Tree:

Self Notes:
üçã Mark each node to its parent to traverse upwards
üçã We will do a BFS traversal starting from the target node
üçã As long as we have not seen our node previously, Traverse up, left, right until reached Kth distance
üçã when reached Kth distance, break out of BFS loop and remaining node's values in our queue is our result


void markParents(TreeNode* root, unordered_map<TreeNode*, TreeNode*> &parent_track, TreeNode* target){
	queue<TreeNode*> queue;
	queue.push(root);
	
	while(!queue.empty()){
		TreeNode* current= queue.front();
		queue.pop();
		if(current->left){
			parent_track[current->left]= current;
			queue.push(current->left);
		}
		if(current->right){
			parent_track[current->right]= current;
			queue.push(current->right);
		}
	}
}

vector<int> distanceK(TreeNode* root, TreeNode* target, int k){
	unordered_map<TreeNode*, TreeNode*> parent_track; // node->parent
	markParents(root, parent_track, target);
	
	unordered_map<TreeNode*, bool> visited;
	queue<TreeNode*> queue;
	queue.push(target);
	visited[target]= true;
	int cur_level= 0;
	
	while(!q.empty()){ // Second BFS to go upto K level from target node and using our hashtable info
		int size= q.size();
		if(cur_level++ == k) break;
		
		for(int i=0;i<size;i++){
			TreeNode* current= queue.front();
			queue.pop();
			if(current->left && !visited[current->left]){
				queue.push(current->left);
				visited[current->left]= true;
			}
			if(current->right && !visited[current->right]){
				queue.push(current->right);
				visited[current->right)= true;
			}
			if(parent_track[current] && !visited[parent_track[current]]){
				queue.push(parent_track[current]);
				visited[parent_track[current]]= true;
			}
		}
	}
	vector<int> result;
	while(!queue.empty()){
		TreeNode* current= queue.front();
		queue.pop();
		result.push_back(current->val);
	}
	return result;
}
// TC= O(n), SC= O(n)+O(n)+O(n)= O(n)






L31. Minimum time taken to BURN the Binary Tree from a Node:

Self Notes: 
üçä Mark each node to its parent to traverse upwards in a binary tree
üçä We will do a BFS traversal from our starting node
üçä Traverse up, left, right until 1 radial level (adjacent nodes) are burned and increment our timer

int findMaxDistance(map<BinaryTreeNode<int>*, BinaryTreeNode<int>*> &mpp, BinaryTreeNode<int>* target){
	queue<BinaryTreeNode<int>*> q;
	q.push(target);
	map<BinaryTreeNode<int>*, int> vis;
	vis[target]= 1;
	int maxi= 0;
	
	while(!q.empty()){
		int sz= q.size();
		int flag= 0;
		for(int i=0;i<sz;i++){
			auto node= q.front();
			q.pop();
			if(node->left && !vis[node->left]){
				flag= 1;
				vis[node->left]= 1;
				q.push(node->left);
			}
			if(node->right && !vis[node->right]){
				flag= 1;
				vis[node->right]= 1;
				q.push(node->right);
			}
			
			if(mpp[node] && !vis[mpp[node]]){
				flag= 1;
				vis[mpp[node]]= 1;
				q.push(mpp[node]);
			}
		}
		if(flag) maxi++;
	}
	return maxi;
}  

BinaryTreeNode<int>* bfsToMapParents(BinaryTreeNode<int>* root, map<BinaryTreeNode<int>*, BinaryTreeNode<int>*> &mpp, int start){
	queue<BinaryTreeNode<int>*> q;
	q.push(root);	
	BinaryTreeNode<int>* res;
	while(!q.empty()){
		BinaryTreeNode<int>* node= q.front();
		if(node->data==start) res= node;
		q.pop();
		if(node->left){
			mpp[node->left]= node;
			q.push(node->left);
		}
		if(node->right){
			mpp[node->right]= node;
			q.push(node->right);
		}
	}
	return res;
}

int timeToBurnTree(BinaryTreeNode<int>* root, int start){
	map<BinaryTreeNode<int>*, BinaryTreeNode<int>*> mpp;
	BinaryTreeNode<int>* target= bfsToMapParents(root, mpp, start);
	int maxi= findMaxDistance(mpp, target);
	return maxi;
}
// TC= O(n)+O(n)= O(n), SC= O(n)