L52. Recover BST (Correct BST with two nodes swapped):

class Solution{
	
	private:
	
	TreeNode* first;
	TreeNode* prev;
	TreeNode* middle;
	TreeNode* last;
	
	private:
	
	void inorder(TreeNode* root){
		if(root==NULL) return;
		
		inorder(root->left);
		
		if(prev!=NULL && (root->val<prev->val)){
			
			// If this is the 1st violation, mark these two nodes as 'first' and 'middle'
			if(first==NULL){
				first= prev;
				middle= root;
			}
			// If this is the 2nd violation, mark this node as last
			else
				last= root;
		}
		// Mark this node as previous
		prev= root;
		
		inorder(root->right);
	}
	
	public:
	
	void recoverTree(TreeNode* root){
		first= middle= last= NULL;
		prev= new TreeNode(INT_MIN);
		inorder(root);
		if(first && last) swap(first->val, last->val);
		else if(first && middle) swap(first->val, middle->val);
	}
};

// TC= O(n), SC= O(1)






L53. Largest BST in Binary Tree:

class NodeValue{
	public:
	
	int maxNode, minNode, maxSize;
	
	NodeValue(int minNode, int maxNode, int maxSize){
		this->maxNode= maxNode;
		this->minNode= minNode;
		this->maxSize= maxSize;
	}
};

NodeValue largestBSTSubtreeHelper(TreeNode* root){
	// An empty tree is a BST of size 0
	if(!root)
		return NodeValue(INT_MAX, INT_MIN, 0);
	
	// Get values from left and right subtree of current tree
	auto left= largestBSTSubtreeHelper(root->left);
	auto right- largestBSTSubtreeHelper(root->right);
	
	// Current node is greater than max in left and smaller than min in right
	if(left.maxNode<root->val && root->val<right.minNode){
		// It is a BST
		return NodeValue(min(root->val, left.minNode), max(root->val, right.maxNode, left.maxSize+right.maxSize+1);
	}
	
	// Otherwise, return [-inf, inf] so that parent can't be in valid BST
	return NodeValue(INT_MIN, INT_MAX, max(left.maxSize, right.maxSize));
}

int largestBSTSubtree(TreeNode* root){
	return largestBSTSubtreeHelper(root).maxSize;
}

// TC= O(n), SC= O(1)