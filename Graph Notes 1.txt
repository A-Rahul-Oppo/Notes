L1. Introduction to Graphs (Types of Graphs):

Two Components:
1. Node/Vertex
2. Edge

Types of Graphs:
1. Undirected Graphs
2. Directed Graphs
3. Weighted Graphs (Undirected and Directed)

Degree of a vertex: Number of edges that are incoming to or outgoing from the node
In an undirected graph, Total degree of all the nodes= 2*Edges

Indegree: Number of edges that are incoming to the node
Outdegree: Number of edges that are outgoing from the node

Path: In an undirected graph, a path is a sequence of nodes such that none of the nodes are repeating or visited twice in that path

DAG: Directed Cyclic Graph






L2. Graph Representation in C++:

n and m. Next m lines contain 2 integers.

1. Adjacency Matrix:

int main(){
	int n, m;
	cin>>n>>m;
	
	// declare the adjacent matrix
	// int adj[n+1][n+1];
	vector<vector<int>> adj(n+1, vector<int>(n+1, 0));
	
	// take edges as input
	for(int i=0;i<m;i++){
		int u, v;
		cin>>u>>v;
		adj[u][v]= 1;
		adj[v][u]= 1;
	}
	return 0;
}

// SC= O(n*n)


2. Adjacency List:

int main(){
	int n, m;
	cin>>n>>m;
	
	vector<vector<int>> adj(n+1);
	
	for(int i=0;i<m;i++){
		int u, v;
		cin>>u>>v;
		
		adj[u].push_back(v);
		adj[v].push_back(u);
	}
	return 0;
}

// SC= O(n+(2*E))






L4. Connected Components in Graph:

Graph may consist of different components
Disconnected Graph : Component1 + Component2 + Component3 make up a single disconnected graph

Graph can be either single component or more than one components
Even a single node can be called as a component

Write code for multiple components whether it is DFS or BFS

Take visited array and initialise as 0
for(int i=1;i<=n;i++){
	if(!visited[i]){
		// Write code for either BFS or DFS
	}
}

How to find the number of components?
Count the number of times your code goes inside the if statement






L5. Breadth-First Search (BFS):

vector<int> bfsOfGraph(int V, vector<int> adj[]){
	vector<int> bfs;
	vector<int> vis(V+1, 0);
	
	for(int i=1;i<=V;i++){
		if(!vis[i]){
			queue<int> q;
			q.push(i);
			vis[i]= 1;
			
			while(!q.empty()){
				int node= q.front();
				q.pop();
				bfs.push_back(node);
				
				for(auto it: adj[node]){
					if(!vis[it]){
						q.push(it);
						vis[it]= 1;
					}
				}
			}
		}
	}
	return bfs;
}

// TC= O(n+E) (n is time taken for visiting n nodes and E is for travelling throught adjacent nodes overall)
// SC= O(n+E)+O(n)+O(n) (Adjacent List+Visited Array+Queue)






L6. Depth-First Search (DFS):

void dfs(int node, vector<int> &vis, vector<int> adj[], vector<int> &storeDfs){
	storeDfs.push_back(node);
	vis[node]= 1;
	
	for(auto it: adj[node]){
		if(!vis[it]){
			dfs(it, vis, adj, storeDfs);
		}
	}
	return;
}

vector<int> dfsOfGraph(int V, vector<int> adj[]){
	vector<int> storeDfs;
	vector<int> vis(V+1, 0);
	
	for(int i=1;i<=V;i++){
		if(!vis[i]){
			dfs(i, vis, adj, storeDfs);
		}
	}
	
	return storeDfs;
}

// TC= O(n+E) (n is time taken for visiting n nodes, and E is for travelling through adjacent nodes overall
// SC= O(n+E)+O(n)+O(n) (Adj List+Vis Array+Auxillary Space)






L7. Cycle Detection in Undirected Graph using BFS:

bool checkForCycle(int s, int V, vector<int> adj[], vector<int> &visited){
	// Create a queue for BFS
	queue<pair<int, int>> q;
	
	visited[s]= true;
	q.push({s, -1});
	
	while(!q.empty()){
		int node= q.front().first;
		int par= q.front().second;
		q.pop();
		
		for(auto it: adj[node]){
			if(!visited[it]){
				visited[it]= true;
				q.push({it, node});
			}
			else if(it!=par){
				return true;
			}
		}
	}
	return false;
}

bool isCycle(int V, vector<int> adj[]){
	vector<int> vis(V+1, 0);
	
	for(int i=1;i<=V;i++)
		if(!vis[i])
			if(checkForCycle(i, V, adj, vis))
				return true;
	
	return false;
}

// TC= O(n+E), SC= O(n+E)+O(n)+O(n)






L8. Cycle Detection in Undirected Graph using DFS:

bool checkForCycle(int node, int parent, vector<int> &vis, vector<int> adj[]){
	vis[node]= 1;
	
	for(auto it: adj[node]){
		if(!vis[it]){
			if(checkForCycle(it, node, vis, adj))
				return true;
		}
		else if(it!=parent){
			return true;
		}
	}
	
	return false;
}

bool isCycle(int V, vector<int> adj[]){
	vector<int> vis(V+1, 0);
	for(int i=1;i<=V;i++){
		if(!vis[i])
			if(checkForCycle(i, -1, vis, adj)
				return true;
	}
	return false;
}

// TC= O(n+E), SC= O(n+E)+O(n)+O(n)