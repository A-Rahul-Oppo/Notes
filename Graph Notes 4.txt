L18. Minimum Spanning Tree (MST) Explanation:

Spanning Tree: Convert a graph into a tree such that it contains exactly n nodes and n-1 edges, then we can call that tree as spanning tree
(every node should be reachable by every other node)

Given an undirected and connected graph G= (V, E),a spanning tree of the graph G is a tree that spans G (that is, it includes every vertex of G) and is a subgraph of G (every edge in the tree belongs to G)

The cost of the spanning tree is the sum of the weights of all the edges in the tree
There can be many spanning trees
Minimum spanning tree is the spanning tree where the cost is minimum among all the spanning trees
There also can be many minimum spanning trees

1. Prims Algorithm
2. Kruskals Algorithm






L19. Prims Algorithm (Minimum Spanning Tree):

Rough Algorithm:

1) Create a set mstSet that keeps track of vertices already included in MST

2) Assign a key value to all vertices in the input graph
Initialize all key values as INFINITE
Assign the key value as 0 for the first vertex so that it is picked first

3) While mstSet doesn’t include all vertices
….a) Pick a vertex u which is not there in mstSet and has a minimum key value
….b) Include u to mstSet
….c) Update key value of all adjacent vertices of u
To update the key values, iterate through all adjacent vertices
For every adjacent vertex v, if the weight of edge u-v is less than the previous key value of v, update the key value as the weight of u-v

The idea of using key values is to pick the minimum weight edge from cut
The key values are used only for vertices that are not yet included in MST, the key value for these vertices indicates the minimum weight edges connecting them to the set of vertices included in MST






L20. Prims Algorithm Implementation:

Brute Force Approach:

int main(){
	int N, m;
	cin>>N>>m;
	vector<pair<int, int>> adj[N];
	
	int a, b, wt;
	for(int i=0;i<m;i++){
		cin>>a>>b>>wt;
		adj[a].push_back({b, wt});
		adj[b].push_back({a, wt});
	}
	
	int parent[N];
	int key[N];
	bool mstSet[N];
	
	for(int i=0;i<N;i++){
		key[i]= INT_MAX;
		mstSet[i]= false;
		parent[i]= -1;
	}
	
	key[0]= 0;
	parent[0]= -1;
	
	for(int count=0;count<N-1;count++){
		
		int mini= INT_MAX, u;
		
		for(int v=0;v<N;v++)
			if(mstSet[v]==false && key[v]<mini)
				mini= key[v], u= v;
		
		mstSet[u]= true;
		
		for(auto it: adj[u]){
			int v= it.first;
			int weight= it.second;
			if(mstSet[v]==false && weight<key[v])
				parent[v]= u, key[v]= weight;
		}
	}
	
	for(int i=1;i<N;i++)
		cout<<parent[i]<<" - "<<i<<"\n";
	
	return 0;
}

// TC= O(n*n), SC= O(n)


Optimised Approach: Use priority queue:

int main(){
	int N, m;
	cin>>N>>m;
	vector<pair<int, int>> adj[N];
	
	int a, b, wt;
	for(int i=0;i<m;i++){
		cin>>a>>b>>wt;
		adj[a].push_back({b, wt});
		adj[b].push_back({a, wt});
	}
	
	int parent[N];
	int key[N];
	bool mstSet[N];
	
	for(int i=0;i<N;i++)
		key[i]= INT_MAX, mstSet[i]= false;
		
	priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>> > pq;
	
	key[0]= 0;
	parent[0]= -1;
	pq.push({0, 0});
	
	for(int count= 0;count<N-1;count++){
		
		int u= pq.top().second;
		pq.pop();
		
		mstSet[u]= true;
		
		for(auto it: adj[u]){
			int v= it.first;
			int weight= it.second;
			if(mstSet[v]==false && weight<key[v]){
				parent[v]= u;
				pq.push({key[v], v});
				key[v]= weight;
			}
		}
	}
	
	for(int i=1;i<N;i++)
		cout<<parent[i]<<" - "<<i<<"\n";
	
	return 0;
}

// TC= O(N+E+Nlog(N)) ~ O(Nlog(N)), SC= O(N)






L22. Disjoint Set (Union By Rank and Path Compression):

int parent[100000];
int rank[100000];

void makeSet(){
	for(int i=1;i<=n;i++){
		parent[i]= i;
		rank[i]= 0;
	}
}

int findPar(int node){
	if(node==parent[node])
		return node;
	
	return parent[node]= findPar(parent[node]);
}

void union(int u, int v){
	u= findPar(u);
	v= findPar(v);
	
	if(rank[u]<rank[v]){
		parent[u]= v;
	}
	else if(rank[v]<rank[u]){
		parent[v]= u;
	}
	else{
		parent[v]= u;
		rank[u]++;
	}
}

void main(){
	
	makeSet();
	int m; cin>>m;
	
	while(m--){
		int u, v; cin>>u>>v;
		union(u, v);
	}

	// If 2 and 3 belong to the same component or not
	if(findPar(2)!=findPar(3)){
		cout<<"Different Component"<<endl;
	}
	else{
		cout<<"Same Component"<<endl;
	}
}