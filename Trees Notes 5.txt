L39. Introduction to Binary Search Tree:

		N
	   /  \
	  L    R

L<N<R (L<=N<R in case of duplicates)
Left Sub-Tree- BST and Right Sub-Tree- BST






L40. Search in a Binary Search Tree:

TreeNode* searchBST(TreeNode* root, int val){
	while(root!=NULL && root->val!=val){
		root= val<root? root->left: root->right;
	}
	return root;
}
// TC= O(log2(n))






L41. Ceil in a Binary Search Tree:

int findCeil(BinaryTreeNode<int>* root, int key){
	int ceil= -1;
	
	while(root){
		if(root->data==key){
			ceil= root->data;
			return ceil;
		}
		
		if(key>root->data){
			root= root->right;
		}
		
		else{
			ceil= root->data;
			root= root->left;
		}
	}
	return ceil;
}
// TC= O(log2(n))






L42. Floor in a Binary Search Tree:

int floorBST(TreeNode<int>* root, int key){
	int floor= -1;
	
	while(root){
		if(root->val==key){
			floor= root->val;
			return floor;
		}
		
		if(key>root->val){
			floor= root->val;
			root= root->right;
		}
		
		else{
			root= root->left;
		}
	}
	return floor;
}
// TC= O(log2(n))






L43. Insert a given Node in Binary Search Tree:

TreeNode* insertIntoBST(TreeNode* root, int val){
	if(root==NULL)
		return new TreeNode(val);
	TreeNode* cur= root;
	
	while(true){
		if(cur->val<=val){
			if(cur->right!=NULL){
				cur= cur->right;
			}
			else{
				cur->right= new TreeNode(val)
				break;
			}
		}
		else{
			if(cur->left!=NULL){
				cur= cur->left;
			}
			else{
				cur->left= new TreeNode(val);
				break;
			}
		}
	}
	return root;
}
// TC= O(log2(n))






L44. Delete a Node in Binary Search Tree:

TreeNode* deleteNode(TreeNode* root, int key){
	if(root==NULL) return NULL;
	
	if(root->val==key)
		return helper(root);
	
	TreeNode* dummy= root;
	while(root!=NULL){
		if(root->val>key){
			if(root->left!=NULL && root->left->val==key){
				root->left= helper(root->left);
				break;
			}
			else{
				root= root->left;
			}
		}
		else{
			if(root->right!=NULL && root->right->val==key){
				root->right= helper(root->right);
				break;
			}
			else{
				root= root->right;
			}
		}
	}
	return dummy;
}

TreeNode* helper(TreeNode* root){
	if(root->left==NULL)
		return root->right;
	
	else if(root->right==NULL)
		return root->left;
	
	TreeNode* rightChild= root->right;
	TreeNode* lastRight= findLastRight(root->left);
	lastRight->right= rightChild;
	return root->left;
}

TreeNode* findLastRight(TreeNode* root){
	if(root->right==NULL)
		return root;
	
	return findLastRight(root->right);
}

// TC= O(log2(n))






L45. Kth Smallest/Largest Element in BST:

Kth Largest:

TreeNode* kthLargest(TreeNode* root, int &k){
	if(root==NULL)
		return NULL;
	
	TreeNode* right= kthLargest(root->right, k);
	
	if(right!=NULL)
		return right;
	k--;
	
	if(k==0)
		return root;
	
	return kthLargest(root->left, k);
}


Kth Smallest:

TreeNode* kthSmallest(TreeNode* root, int &k){
	if(root==NULL)
		return NULL;
	
	TreeNode* left= kthSmallest(root->left, k);
	
	if(left!=NULL)
		return left;
	k--;
	
	if(k==0)
		return root;
	
	return kthSmallest(root->right, k);
}

//TC= O(min(k, n)), SC= O(min(k, n))
