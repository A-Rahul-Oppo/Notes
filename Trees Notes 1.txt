L1.
Full Binary Tree: Every node has either 0 ir 2 children
Complete Binary Tree: All levels are completely filled except the last level and last level has all the nodes as left as possible
Perfect Binary Tree: All leaf nodes are at the same level
Balanced Binary Tree: Height of the tree at max log(N) [N=number of nodes]
Degenerate Tree: Skew trees (like linked list)






L2. Binary Tree representation in C++:

struct Node{
	int data;
	struct Node* left;
	struct Node* right;
	Node(int val){
		data= val;
		left= right= NULL;
	}
}

main(){
	struct Node* root= new Node(1);
	root->left= new Node(2);
	root->right= new Node(3);
	root->left->right= new Node(5);
}






L4. Traversal Techniques: BFS and DFS
3 types in DFS: Inorder, Preorder and Postorder
1. Inorder (left-root-right)
2. Preorder (root-left-right)
3. Postorder (left-right-root)

BFS: Level by level






L5. Preorder Traversal:

void preOrder(Node* node){
	if(node==NULL)
		return;
	print(node->data);
	preOrder(node->left);
	preOrder(node->right);
}






L6. Inorder Traversal:

void inOrder(Node* node){
	if(node==NULL)
		return;
	inOrder(node->left);
	print(node->data);
	inOrder(node->right);
}






L7. Postorder Traversal:

void postOrder(Node* node){
	if(node==NULL)
		return;
	postOrder(node->left);
	postOrder(node->right);
	print(node->data);
}






L8. Levelorder Traversal: (Queue: FIFO):

vector<vector<int>> levelOrder(TreeNode* root){
	vector<vector<int>> ans;
	if(root==NULL) return ans;
	queue<TreeNode*> q;
	q.push(root);
	while(!q.empty()){
		int size= q.size();
		vector<int> level;
		for(int i=0;i<size;i++){
			TreeNode* node= q.front();
			q.pop();
			if(node->left!=NULL) q.push(node->left);
			if(node->right!=NULL) q.push(node->right);
			level.push_back(node->val);
		}
		ans.push_back(level);
	}
	return ans;
}






L9. Iterative Preorder Traversal: (Stack: LIFO):

vector<int> preOrder(TreeNode* root){
	vector<int> preorder;
	if(root==NULL) return preorder;
	
	stack<TreeNode*> st;
	st.push(root);
	while(!st.empty()){
		root= st.top();
		st.pop();
		preorder.push_back(root->val);
		if(root->right!=NULL) st.push(root->right);  //right is first
		if(root->left!=NULL) st.push(root->left);
	}
	return preorder;
}






L10. Iterative Inorder Traversal: (Stack: LIFO):

vector<int> inOrder(TreeNode* root){
	stack<TreeNode*> st;
	TreeNode* node= root;
	vector<int> inorder;
	while(true){
		if(node!=NULL){
			st.push(node);
			node= node->left;
		}
		else{
			if(st.empty()==true) break;
			node= st.top();
			st.pop();
			inorder.push_back(node->val);
			node= node->right;
		}
	}
	return inorder;
}






L11. Iterative Postorder Traversal using 2 stacks:

Steps: 
1. Initial config: Take the root and put it in the 1st stack.
2. Now, take the top from the 1st stack and put it into the 2nd stack
3. After that, if the top in 2nd stack has left → add it in 1st stack.  And if the top in 2nd stack has right → add it in the 1st stack.
4. Now again, take the top from the 1st stack and put it into the 2nd stack. Repeat step 2 & 3 untill 1st stack is empty.
5. Pop the element from the 2nd stack and print.

vector<int> postOrder(TreeNode* root){
	vector<int> postorder;
	if(root==NULL) return postorder;
	stack<TreeNode*> st1, st2;
	st1.push(root);	
	while(!st1.empty()){
		root= st1.top();
		st2.push(root);
		if(root->left!=NULL) st1.push(root->left);
		if(root->right!=NULL) st1.push(root->right);
	}
	while(!st2.empty()){
		postorder.push_back(st2.top()->val);
		st2.pop();
	}
	return postorder;
}






L12. Iterative Postorder Traversal using 1 stack:

while(cur!=NULL || !st.empty()){
	if(cur!=NULL){
		st.push(cur);
		cur= cur->left;
	}
	else{
		temp= st.top->right;
		if(temp==NULL){
			temp= st.top();
			st.pop();
			postorder.push_back(temp->val);
			while(!st.empty() && temp==st.top()->right){
				temp= st.top();
				st.pop();
				postorder.push_back(temp->val);
			}
		}
		else{
			cur= temp;
		}
	}
}






L13. Preorder, Inorder and Postorder Traversalsin 1 Traversal:

vector<int> preInPostTraversal(TreeNode* root){
	stack<pair<TreeNode*, int>> st;
	st.push({root, 1});
	vector<int> pre, in, post;
	if(root==NULL) return;
	while(!st.empty()){
		auto it= st.top();
		st.pop();
		
		// this is part of pre
		// increment 1 to 2
		// push the left side of the tree
		if(it.second==1){
			pre.push_back(it.first->val);
			it.second++;
			st.push(it);
			
			if(it.first->left!=NULL)
				st.push({it.first->left, 1});
		}

		// this is part of in
		// increment 2 to 3
		// push right
		else if(it.second==2){
			in.push_back(it.first->val);
			it.second++;
			st.push(it);
		
			if(it.first->right!=NULL)
				st..push({it.first->right, 1});
		}

		// don't push it back again
		else{
			post.push_back(it.first->val);
		}
	}
}